#!/usr/bin/python

# Copyright (C) 2010 Javier Palacios
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License Version 2
# as published by the Free Software Foundation.
# 
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.


__version__ = "1.3.2"


import amebaC3_client.client


import ConfigParser

import logging

console = logging.StreamHandler()
formatter = logging.Formatter("%(levelname)s : %(message)s")
console.setFormatter(formatter)

logger = logging.getLogger()
logger.addHandler( console )


#FIXME : Verify user/permissions before writing config, or even calling urlopen
def store_config( config ) :
    fd = open( configfile , 'w' )
    config.write( fd )
    fd.close()


try :
    import uuid
except :
    uuid = False

import socket

import os , glob

def guess_distro ( ) :

    # FIXME : create the first parser with this code !!!
    if os.path.isfile( "/etc/lsb-release" ) :
        fd = open( "/etc/lsb-release" )
        for line in fd.readlines() :
            k,v = line[:-1].split('=',1)
            if k == "DISTRIB_CODENAME" :
                fd.close()
                return v
        fd.close()

    # FIXME : returning distro name is not enough, create specific parsers and return nothing if not implemented
    for file in glob.glob( "/etc/*-release" ) :
        return os.path.basename( file[:-8] )
    # NOTE : en suse hay un /etc/SuSE-brand que es lo que necesitamos

    if os.path.isfile( "/etc/debian_version" ) :
        fd = open( "/etc/debian_version" )
        v = fd.readline()[:-1]
        fd.close()
        return v


def register ( config , options , args ) :

    # FIXME : Warning if options.store assigned
    options.store = False
    errors = []

    _url = None

    if args :
        _url = args.pop(0)
        options.store = True

    if config.has_option( 'global' , 'url' ) :
        if _url :
            if _url != config.get( 'global' , 'url' ) :
                logger.error( "Supplied URL does not match the one in configuration file" )
                return False
            logger.warning( "Server URL already given on configuration file" )
            options.store = False
        else :
            _url = config.get( 'global' , 'url' )

    if not _url :
        errors.append( "URL" )

    _uuid = None

    if args :
        _uuid = args.pop(0)
        uuid_location = "command line"
        options.store = True

    if config.has_option( 'global' , 'uuid' ) :
        if _uuid :
            if _uuid != config.get( 'global' , 'uuid' ) :
                logger.error( "Given UUID does not match the one from configuration file" )
                return False
            logger.warning( "UUID already given on configuration file" )
        else :
            _uuid = config.get( 'global' , 'uuid' )
            uuid_location = "configuration file"

    if options.autouuid and options.requestuuid :
        logger.error( "UUID autogeneration and request cannot be mixed" )
        return False

    if options.autouuid :
        if _uuid :
            logger.error( "Autogeneration requested with UUID given on %s" % uuid_location )
            return False
        if not uuid :
            logger.error( "Supply explicit UUID, no python module available for autogeneration" )
            return False
        _uuid = uuid.uuid4()
        options.store = True
    elif options.requestuuid :
        if _uuid :
            logger.error( "Requesting UUID from server while value given on %s" % uuid_location )
            return False
        _uuid = "__REQUEST__"
        options.store = True

    if not _uuid :
        errors.append( "UUID" )

    _distro = guess_distro()
    if options.distro :
        if _distro and _distro != options.distro :
            # FIXME : Turn this into error ?
            logger.warning( "Guessed distro name '%s' differs from supplied on command line" % _distro )
        _distro = options.distro

    if not _distro :
        errors.append( "Distro" )

    if errors :
        logger.error( "Missing parameters : %s" % ", ".join( errors ) )
        parser.print_help()
        return False

    if args :
        logger.error( "Too many arguments" )
        parser.print_help()
        return False


    data = { 'UUID':_uuid , 'HOSTNAME':socket.gethostname() , 'DISTRO':_distro }

    if options.metrics :
        data['METRICS'] = options.metrics

    if options.services :
        data['SERVICES'] = options.services

    ret = amebaC3_client.client.register( _url , data )
    if ret :
        # FIXME : If we supply url & uuid on command line matching those in config file, we will rewrite it
        #         Giving only url will not overwrite as store flag is set back to False
        # A temporary solution is to check before writing that new info is being added
        if options.store :
            if not config.has_section( 'global' ) :
                config.add_section( 'global' )
            config.set( 'global' , 'url' , _url )
            if options.requestuuid :
                config.set( 'global' , 'uuid' , ret )
            else :
                config.set( 'global' , 'uuid' , _uuid )
            store_config( config )

    return True


def check_configuration ( check_uuid=True ) :

    errors = []

    if not config.has_section( 'global' ) :
        logger.critical( "Main section missing on configuration file" )
        return False

    if not config.has_option( 'global' , 'url' ) :
        errors.append( "URL" )

    if check_uuid :
        if not config.has_option( 'global' , 'uuid' ) :
            errors.append( "UUID" )

    if errors :
        logger.critical( "Missing parameters on main section : %s" % ", ".join( errors ) )
        return False

    return True


def login ( config , options , args ) :

    if args :
        logger.error( "Too many arguments" )
        parser.print_help()
        return False

    if not check_configuration() :
        return False

    _url = config.get( 'global' , 'url' )
    _uuid = config.get( 'global' , 'uuid' )

    sessid , delay = amebaC3_client.client.login ( _url , _uuid )
    if sessid :
        print "session id : %s" % sessid
        if delay :
            print "activated in %s seconds" % delay

    return True


def logout ( config , options , args ) :

    if args :
        logger.error( "Too many arguments" )
        parser.print_help()
        return False

    if not options.sessid :
        logger.error( "Missing session identifier" )
        parser.print_help()
        return False

    if not check_configuration( False ) :
        return False

    _url = config.get( 'global' , 'url' )

    if amebaC3_client.client.logout ( _url , options.sessid ) :
        logger.info( "Session closed : %s" % options.sessid )

    return True


def loginout ( config , options , args ) :

    if args :
        logger.error( "Too many arguments" )
        parser.print_help()
        return False

    if not check_configuration() :
        return False

    _url = config.get( 'global' , 'url' )
    _uuid = config.get( 'global' , 'uuid' )

    amebaC3_client.client.loginout ( _url , _uuid )

    return True


import fcntl

def get_lock ( filename="/tmp/aupd.lock" ) :
    fp = open( filename , 'w' )
    try :
        fcntl.lockf( fp , fcntl.LOCK_EX | fcntl.LOCK_NB )
    except IOError , ex :
        return None
    return fp


import time , random

def pull ( config , options , args=() ) :

    if args :
        logger.error( "Too many arguments" )
        parser.print_help()
        return False

    if not check_configuration() :
        return False

    if not config.has_section( 'pull' ) :
        logger.critical( "Section 'pull' mising on configuration" )
        return False

    if options.wait is None :
        options.wait = 0
        if config.has_option( 'pulldaemon' , 'random-wait' ) :
            options.wait = config.getfloat( 'pulldaemon' , 'random-wait' )

    if options.check_only is None :
        if config.has_option( 'pull' , 'check-only' ) :
            options.check_only = config.getboolean( 'pull' , 'check-only' )

    if options.silent :
        logger.setLevel(logging.CRITICAL)

    outdated_retcode = 0

    cmds_parname = 'update_cmds'
    if options.check_only :
        cmds_parname = 'check_cmds'
        if config.has_option( 'pull' , 'outdated_retcode' ) :
            outdated_retcode = config.getint( 'pull' , 'outdated_retcode' )
    if not config.has_option( 'pull' , cmds_parname ) :
        logger.critical( "No '%s' defined on pull section" % cmds_parname )
        return False
    _cmds = config.get( 'pull' , cmds_parname )

    lock = get_lock()
    if not lock :
        logger.error( "Another 'pull' instance running" )
        return False

    if options.wait :
        time.sleep( options.wait * random.random() )

    _url = config.get( 'global' , 'url' )
    _uuid = config.get( 'global' , 'uuid' )

    return amebaC3_client.client.pull ( _url , _uuid , _cmds.split(',') , outdated_retcode )


import threading

def __pulldaemon ( config , options ) :

    # NOTE : logging of warnings should be disabled
    timerid = threading.Timer( options.interval , __pulldaemon , ( config , options ) )
    timerid.start()
    pull( config , options )

import amebaC3_client.daemon

def pulldaemon ( config , options , args ) :

    if args :
        logger.error( "Too many arguments" )
        parser.print_help()
        return False

    if not check_configuration() :
        return False

    if not options.interval :
        if config.has_option( 'pulldaemon' , 'check-interval' ) :
            options.interval = config.getfloat( 'pulldaemon' , 'check-interval' )
        else :
            logger.critical( "No checking interval specified on configuration or command line" )
            return False

    if options.wait is None :
        if config.has_option( 'pulldaemon' , 'random-wait' ) :
            options.wait = config.getfloat( 'pulldaemon' , 'random-wait' )

    if options.check_only is None :
        if config.has_option( 'pulldaemon' , 'check-only' ) :
            options.check_only = config.getboolean( 'pulldaemon' , 'check-only' )

    if options.store :
        if not config.has_section( 'pulldaemon' ) :
            config.add_section( 'pulldaemon' )
        config.set( 'pulldaemon' , 'check-interval' , options.interval )
        if options.wait is not None :
            config.set( 'pulldaemon' , 'random-wait' , options.wait )
        if options.check_only is not None :
            config.set( 'pulldaemon' , 'check-only' , options.check_only )
        store_config( config )

    amebaC3_client.daemon.REDIRECT_TO = options.logfile
    open( amebaC3_client.daemon.REDIRECT_TO , "a" ).close()
    retcode = amebaC3_client.daemon.createDaemon()

    __pulldaemon( config , options )

    return True


command = { 'register':register ,
            'pull':pull ,
            'logout':logout ,
            'login':login ,
            'loginout':loginout ,
            'pulldaemon':pulldaemon ,
            }


import optparse

usage = """
	%prog [--autogenerate|--requestuuid] [--distro distroname] [--metrics metric,...] [--services service,...] register [url [uuid] ]
	%prog [--random-wait seconds] [--check-only|--force-upgrade] [--check-interval seconds] [--store] [--logfile filename] pulldaemon
	%prog [--random-wait seconds] [--check-only|--force-upgrade] [--silent] pull
	%prog login
	%prog --sessid id logout
	%prog loginout
"""

version = "%%prog %s" % __version__

parser = optparse.OptionParser(usage=usage, version=version)
parser.set_defaults( autouuid=False )
parser.set_defaults( requestuuid=False )
parser.set_defaults( check_only=True )


# register options

parser.add_option("--autogenerate",
        action="store_true", dest="autouuid",
        help="Automatically generate a random UUID")

parser.add_option("--requestuuid",
        action="store_true", dest="requestuuid",
        help="Request UUID from server")

parser.add_option("--distro", dest="distro",
        help="Set primary channel")

parser.add_option("--metrics", dest="metrics",
        help="Reported metrics")

parser.add_option("--services", dest="services",
        help="Services to be monitored")


# logout options

parser.add_option("--sessid", dest="sessid",
        help="Set session ID")


# pull/pulldaemon options

parser.add_option("--random-wait",
	dest="wait", type="float",
        help="Set maximum random waiting time")

parser.add_option("--check-only",
        action="store_true", dest="check_only",
        help="Perform only a check for updates")

parser.add_option("--force-upgrade",
        action="store_false", dest="check_only",
        help="Force a system upgrade")


# pull specific options

parser.add_option("--silent",
        action="store_true", dest="silent", default=False,
        help="Run in silent mode (for console based execution)")


# pulldaemon specific options

parser.add_option("--check-interval",
	dest="interval", type="float",
        help="Set time interval in seconds within checks")

parser.add_option("--store",
        action="store_true", dest="store", default=False,
        help="Store current parameter values into configuration file")

parser.add_option("--logfile", dest="logfile", default="/var/log/ameba_updater.log",
        help="Specify logfile for daemon")


import sys

if __name__ == "__main__" :

    configfile = "/etc/aupd.conf"

    config = ConfigParser.RawConfigParser()
    config.read( configfile )

    options , args = parser.parse_args()

    if not args :
        parser.print_help()
        sys.exit(1)

    subcmd = args.pop(0)

    if not command.has_key( subcmd ) :
        parser.print_help()
        sys.exit(1)

    if not command[ subcmd ]( config , options , args ) :
        sys.exit(1)

